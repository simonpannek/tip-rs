//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "event")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    pub guild_id: i64,
    pub owner_id: Option<i64>,
    #[sea_orm(column_type = "Text")]
    pub description: String,
    pub channel_id: Option<i64>,
    pub role_id: Option<i64>,
    pub announcement_channel_id: Option<i64>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::guild::Entity",
        from = "Column::GuildId",
        to = "super::guild::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Guild,
    #[sea_orm(has_many = "super::scheduled_action::Entity")]
    ScheduledAction,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::OwnerId",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    User,
}

impl Related<super::guild::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Guild.def()
    }
}

impl Related<super::scheduled_action::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ScheduledAction.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::event_member::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::event_member::Relation::Event.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
